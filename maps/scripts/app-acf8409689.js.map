{"version":3,"sources":["scripts/app-acf8409689.js"],"names":["angular","module","selectOnClick","$window","restrict","link","scope","element","attrs","on","getSelection","toString","this","setSelectionRange","value","length","$inject","directive","acmeNavbar","NavbarController","moment","vm","relativeDate","creationDate","fromNow","templateUrl","controller","controllerAs","bindToController","MainController","bla","EncryptController","encryptIt","crypt","JSEncrypt","setPublicKey","publickey","encrypted","encrypt","message","DecryptController","decrypted","default_key_size","getKey","privatekey","getPrivateKey","getPublicKey","decryptIt","decrypt","runBlock","$log","debug","run","routeConfig","$routeProvider","when","otherwise","redirectTo","config","constant","malarkey","$logProvider","debugEnabled","$templateCache","put"],"mappings":"CAAA,WACE,YAEAA,SACGC,OAAO,oBAAqB,YAAa,YAAa,UAAW,aAAc,aAAc,SAAU,aAAc,UAAW,eAAgB,cAIrJ,WACE,YAOA,SAASC,GAAcC,GACrB,OACEC,SAAU,IACVC,KAAM,SAAUC,EAAOC,EAASC,GAC9BD,EAAQE,GAAG,QAAS,WACbN,EAAQO,eAAeC,YAE1BC,KAAKC,kBAAkB,EAAGD,KAAKE,MAAMC,YAZ/Cb,EAAcc,SAAW,WAAzBhB,QACGC,OAAO,oBACPgB,UAAU,gBAAiBf,MAmBhC,WACE,YAQA,SAASgB,KAcP,QAASC,GAAiBC,GACxB,GAAIC,GAAKT,IAGTS,GAAGC,aAAeF,EAAOC,EAAGE,cAAcC,UAjB5CL,EAAiBH,SAAW,SAD5B,IAAIC,IACFb,SAAU,IACVqB,YAAa,oCACbnB,OACIiB,aAAc,KAElBG,WAAYP,EACZQ,aAAc,KACdC,kBAAkB,EAGpB,OAAOX,GAjBTjB,QACGC,OAAO,oBACPgB,UAAU,aAAcC,MA4B7B,WACE,YAOA,SAASW,KACP,GAAIR,GAAKT,IACTS,GAAGS,IAAM,SAPX9B,QACGC,OAAO,oBACPyB,WAAW,iBAAkBG,MASlC,WACI,YAOA,SAASE,KACL,GAAIV,GAAKT,IAGTS,GAAGW,UAAY,WACX,GAAIC,GAAQ,GAAIC,UAChBD,GAAME,aAAad,EAAGe,WACtBf,EAAGgB,UAAYJ,EAAMK,QAAQjB,EAAGkB,UAZxCvC,QACKC,OAAO,oBACPyB,WAAW,oBAAqBK,MAezC,WACI,YAOA,SAASS,KACL,GAAInB,GAAKT,IACTS,GAAGoB,WAAcF,QAAS,OAC1B,IAAIN,GAAQ,GAAIC,YAAWQ,iBAAkB,MAC7CT,GAAMU,SACNtB,EAAGuB,WAAaX,EAAMY,gBACtBxB,EAAGe,UAAYH,EAAMa,eAErBzB,EAAG0B,UAAY,WACX1B,EAAGoB,WAAaF,QAASN,EAAMe,QAAQ3B,EAAGkB,WAdlDvC,QACKC,OAAO,oBACPyB,WAAW,oBAAqBc,MAiBzC,WACE,YAOA,SAASS,GAASC,GAEhBA,EAAKC,MAAM,gBALbF,EAASjC,SAAW,QAFpBhB,QACGC,OAAO,oBACPmD,IAAIH,MAUT,WACE,YAMA,SAASI,GAAYC,GACnBA,EACGC,KAAK,KACJ9B,YAAa,qBACbC,WAAY,iBACZC,aAAc,SAEf4B,KAAK,YACJ9B,YAAa,2BACbC,WAAY,oBACZC,aAAc,YAEf4B,KAAK,YACJ9B,YAAa,2BACbC,WAAY,oBACZC,aAAc,YAEf6B,WACCC,WAAY,MAnBlBJ,EAAYrC,SAAW,kBAHvBhB,QACGC,OAAO,oBACPyD,OAAOL,MA2BZ,WACE,YAEArD,SACGC,OAAO,oBACP0D,SAAS,WAAYC,UACrBD,SAAS,SAAUvC,WAIxB,WACE,YAOA,SAASsC,GAAOG,GAEdA,EAAaC,cAAa,GAH5BJ,EAAO1C,SAAW,gBAJlBhB,QACGC,OAAO,oBACPyD,OAAOA,MAWZ1D,QAAQC,OAAO,oBAAoBmD,KAAK,iBAAkB,SAASW,GAAiBA,EAAeC,IAAI,2BAA2B,0mCAClID,EAAeC,IAAI,2BAA2B,ytCAC9CD,EAAeC,IAAI,qBAAqB,yyCACxCD,EAAeC,IAAI,oCAAoC","file":"scripts/app-acf8409689.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngMessages', 'ngAria', 'ngResource', 'ngRoute', 'ui.bootstrap', 'toastr']);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .directive('selectOnClick', selectOnClick);\n\n  /** @ngInject */\n  function selectOnClick($window) {\n    return {\n      restrict: 'A',\n      link: function (scope, element, attrs) {\n        element.on('click', function () {\n          if (!$window.getSelection().toString()) {\n            // Required for mobile Safari\n            this.setSelectionRange(0, this.value.length)\n          }\n        });\n      }\n    };\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .directive('acmeNavbar', acmeNavbar);\n\n  /** @ngInject */\n  function acmeNavbar() {\n    var directive = {\n      restrict: 'E',\n      templateUrl: 'app/components/navbar/navbar.html',\n      scope: {\n          creationDate: '='\n      },\n      controller: NavbarController,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function NavbarController(moment) {\n      var vm = this;\n\n      // \"vm.creation\" is avaible by directive option \"bindToController: true\"\n      vm.relativeDate = moment(vm.creationDate).fromNow();\n    }\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController() {\n    var vm = this;\n    vm.bla = \"blabbb\";\n  }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('rsaPasswordShare')\n        .controller('EncryptController', EncryptController);\n\n    /** @ngInject */\n    function EncryptController() {\n        var vm = this;\n\n\n        vm.encryptIt = function() {\n            var crypt = new JSEncrypt();\n            crypt.setPublicKey(vm.publickey);\n            vm.encrypted = crypt.encrypt(vm.message);\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('rsaPasswordShare')\n        .controller('DecryptController', DecryptController);\n\n    /** @ngInject */\n    function DecryptController() {\n        var vm = this;\n        vm.decrypted = { message: \"asdf\"};\n        var crypt = new JSEncrypt({default_key_size: 1024});\n        crypt.getKey();\n        vm.privatekey = crypt.getPrivateKey();\n        vm.publickey = crypt.getPublicKey();\n\n        vm.decryptIt = function() {\n            vm.decrypted = {message: crypt.decrypt(vm.message)};\n        }\n    }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .config(routeConfig);\n\n  function routeConfig($routeProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'main'\n      })\n      .when('/encrypt', {\n        templateUrl: 'app/encrypt/encrypt.html',\n        controller: 'EncryptController',\n        controllerAs: 'encrypt'\n      })\n      .when('/decrypt', {\n        templateUrl: 'app/decrypt/decrypt.html',\n        controller: 'DecryptController',\n        controllerAs: 'decrypt'\n      })\n      .otherwise({\n        redirectTo: '/'\n      });\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('rsaPasswordShare')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n  }\n\n})();\n\nangular.module(\"rsaPasswordShare\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/decrypt/decrypt.html\",\"<div class=\\\"container\\\"><div><acme-navbar creation-date=\\\"main.creationDate\\\"></acme-navbar></div><div class=\\\"row\\\"><div class=\\\"col-lg-12\\\"><h2>Decrypt a Message</h2><p>Here you can decrypt a message (e.g. a password).</p><h2>Step 1</h2><p>Send this to your friend who wants to encrypt the message (its your 2048 bit public key, it is safe to share):<br><br></p><form><label><textarea class=\\\"form-control\\\" ng-model=\\\"decrypt.publickey\\\" select-on-click=\\\"\\\" cols=\\\"50\\\" rows=\\\"10\\\" readonly=\\\"readonly\\\"></textarea></label></form><p>DO NOT RELOAD THE PAGE until your friend has sent you the encrypted message. The public key on this page is a one-time use public key only.</p><h2>Step 2</h2><p>Input the message here that your friend has encrypted with your public key:</p><form><label><textarea class=\\\"form-control\\\" ng-model=\\\"decrypt.message\\\" cols=\\\"50\\\" rows=\\\"10\\\"></textarea></label><br><button ng-click=\\\"decrypt.decryptIt()\\\" class=\\\"btn btn-default btn-primary\\\"><i class=\\\"glyphicon glyphicon-bullhorn\\\"></i> Decrypt</button></form><h2>Step 3</h2><p>Below should appear your message...</p><p>{{decrypt.decrypted.message}}</p></div></div></div>\");\n$templateCache.put(\"app/encrypt/encrypt.html\",\"<div class=\\\"container\\\"><div><acme-navbar creation-date=\\\"main.creationDate\\\"></acme-navbar></div><div class=\\\"row\\\"><div class=\\\"col-lg-12\\\"><h2>Encrypt a Message</h2><p>Here you can encrypt a message (e.g. a password).</p><h2>Step 1</h2><p>Get the public key from your friend:<br><br>As he wants to decrypt the message, tell him to go to <a href=\\\"/#/decrypt\\\">the decrypt section and copy the public key</a><br><br><br>Paste his public key here:</p><form><label><textarea class=\\\"form-control\\\" ng-model=\\\"encrypt.publickey\\\" cols=\\\"50\\\" rows=\\\"10\\\"></textarea></label></form><div ng-show=\\\"encrypt.publickey.length > 0\\\"><h2>Step 2</h2><p>Input the message here that you want to send to your friend:</p><form><label><textarea class=\\\"form-control\\\" ng-model=\\\"encrypt.message\\\" cols=\\\"50\\\" rows=\\\"10\\\" ng-change=\\\"encrypt.encryptIt()\\\"></textarea></label><br><button ng-click=\\\"encrypt.encryptIt()\\\" class=\\\"btn btn-default btn-primary\\\"><i class=\\\"glyphicon glyphicon-lock\\\"></i> Encrypt</button></form><h2>Step 3</h2><p>Below should appear your message - send it to your friend...</p><form><label><textarea class=\\\"form-control\\\" select-on-click=\\\"\\\" ng-model=\\\"encrypt.encrypted\\\" cols=\\\"50\\\" rows=\\\"10\\\" readonly=\\\"readonly\\\"></textarea></label></form></div></div></div></div>\");\n$templateCache.put(\"app/main/main.html\",\"<div class=\\\"container\\\"><div><acme-navbar creation-date=\\\"main.creationDate\\\"></acme-navbar></div><div class=\\\"row\\\"><div class=\\\"col-lg-12\\\"><h1>RSA Public/Private Key Message sharing</h1><p>To share messages, such as passwords, across the internet is always a bit problematic. As soon as a password is sent over the wire unencrypted it <em>should be considered as compromised.</em> There are various tools out there, for example 1password, which allow password management. But what if you want to share a passwort with a third party?</p><h2>How it works</h2><p>You can either encrypt a message with a public key or decrypt a message with a private key.<br><br>For example You want to send your friend Patrick a password \\\"ABC\\\".<br>You tell Patrick to go to /#/decrypt and send you <em>his public key</em>.<br>You go to /#/encrypt and put in Patrick\\'s public key and the message you want to encrypt.<br>You send Patrick the encrypted message.<br>Patrick uses /#/decrypt to decrypt the message (with the private key which is created in the background).</p><h2>Is it safe?</h2><p>Hopefully safe enough for transmitting it via the internet. It uses the <a href=\\\"https://github.com/travist/jsencrypt\\\" target=\\\"_blank\\\">JSEncrypt</a> library for generating the keypairs and uses it for encryption/decryption.</p></div></div></div>\");\n$templateCache.put(\"app/components/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-static-top navbar-inverse\\\"><div class=\\\"container-fluid\\\"><div class=\\\"navbar-header\\\"><a class=\\\"navbar-brand\\\" href=\\\"/#/\\\"><span class=\\\"glyphicon glyphicon-home\\\"></span> RSA Password Share</a></div><ul class=\\\"nav navbar-nav\\\"><li><a ng-href=\\\"/#/encrypt\\\">Encrypt (send a message)</a></li><li><a ng-href=\\\"/#/decrypt\\\">Decrypt (receive a message)</a></li></ul></div></nav>\");}]);"],"sourceRoot":"/source/"}